generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                         String          @id @default(uuid())
  email                      String          @unique
  passwordHash               String?
  fullName                   String
  phone                      String?         @db.VarChar(32)
  role                       Role            @default(CUSTOMER)
  addresses                  Address[]
  orders                     Order[]
  wishlists                  Wishlist[]
  carts                       Cart[]
  reviews                    Review[]        // kÃ¼Ã§Ã¼k harf, Ã§oÄŸul
  returnRequests             ReturnRequest[] // kÃ¼Ã§Ã¼k harf, Ã§oÄŸul
  emailVerified              Boolean         @default(false)
  emailVerificationToken     String?         
  emailVerificationTokenExpires DateTime?
  passwordResetToken           String?
  passwordResetTokenExpires    DateTime?
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
}


enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Address {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  title         String   // "Ev", "Ä°ÅŸ", ...
  fullName      String
  phone         String
  city          String
  district      String
  neighbourhood String
  address1      String   // sokak/cadde/bina
  zip           String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  logoUrl  String?
  products Product[]
}

model Category {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  parentId  String?
  imageUrl  String?
  parent    Category?  @relation("CategoryToCategory_parent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory_parent")
  products  Product[]
}

model Product {
  id           String           @id @default(uuid())
  name         String
  slug         String           @unique
  seoTitle     String?          
  seoKeywords  String[]         @default([]) // ðŸ”¹ SEO anahtar kelimeleri (liste olarak)
  brandId      String?
  brand        Brand?           @relation(fields: [brandId], references: [id])
  categoryId   String
  category     Category         @relation(fields: [categoryId], references: [id])
  images       ProductImage[]   
  variants     ProductVariant[] 
  price        Decimal?         @db.Decimal(10, 2)
  currency     String           @default("TRY")
  status       ProductStatus    @default(DRAFT)
  inStock      Boolean          @default(true)
  ratingAvg    Float            @default(0)
  ratingCount  Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  cartItems    CartItem[]
  orderItems   OrderItem[]
  reviews      Review[]
  wishlists    Wishlist[]       @relation("WishlistProducts")
  properties   ProductProperty[]
  modelInfoId  String?          
  modelInfo    ModelInfo?       @relation(fields: [modelInfoId], references: [id])
  modelSize    String?
  sliders      Slider[]         @relation("SliderProducts")
  changeable   Boolean          @default(true) 
}


model ModelInfo {
  id      String   @id @default(cuid())
  name    String
  height  Int?
  weight  Int?
  chest   Int?
  waist   Int?
  hip     Int?
  products Product[]
}

model ProductVariant {
  id         String                 @id @default(uuid())
  productId  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku        String?                @unique
  price      Decimal?               @db.Decimal(10, 2)
  stockQty   Int                    @default(0)
  barcode    String?
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  images     VariantImage[]
  attributes ProductVariantAttribute[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model VariantImage {
  id        String         @id @default(uuid())
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  url       String
  alt       String?
  order     Int            @default(0)
}

model AttributeType {
  id     String           @id @default(uuid())
  name   String
  values AttributeValue[]
}

model AttributeValue {
  id               String                      @id @default(uuid())
  attributeTypeId  String
  value            String
  type             AttributeType               @relation(fields: [attributeTypeId], references: [id])
  variantAttributes ProductVariantAttribute[]
}

model ProductVariantAttribute {
  id               String           @id @default(uuid())
  variantId        String
  attributeValueId String
  variant          ProductVariant   @relation(fields: [variantId], references: [id])
  value            AttributeValue   @relation(fields: [attributeValueId], references: [id])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
  url       String
  alt       String?
  order     Int      @default(0)
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String          @id @default(uuid())
  cartId    String
  cart      Cart            @relation(fields: [cartId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  qty       Int             @default(1)
  unitPrice Decimal         @db.Decimal(10, 2)
}

model Coupon {
  id        String     @id @default(uuid())
  code      String     @unique
  type      CouponType
  value     Decimal    @db.Decimal(10, 2)
  startsAt  DateTime?
  endsAt    DateTime?
  maxUses   Int?
  usedCount Int        @default(0)
  isActive  Boolean    @default(true)
}

enum CouponType {
  PERCENT
  FIXED
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id         String          @id @default(uuid())
  orderId    String
  order      Order           @relation(fields: [orderId], references: [id])
  productId  String
  product    Product         @relation(fields: [productId], references: [id])
  variantId  String?
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  name       String
  qty        Int
  unitPrice  Decimal         @db.Decimal(10, 2)
  returnItems ReturnItem[]
}

model PropertyType {
  id       String           @id @default(uuid())
  name     String           @unique
  values   PropertyValue[]
  products ProductProperty[]
}

model PropertyValue {
  id             String       @id @default(uuid())
  value          String
  propertyTypeId String
  propertyType   PropertyType @relation(fields: [propertyTypeId], references: [id], onDelete: Cascade)
  products       ProductProperty[]
}

model ProductProperty {
  id              String        @id @default(uuid())
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  propertyTypeId  String
  propertyType    PropertyType  @relation(fields: [propertyTypeId], references: [id])
  propertyValueId String
  propertyValue   PropertyValue @relation(fields: [propertyValueId], references: [id])
  @@unique([productId, propertyValueId])
}
model Payment {
  id           String   @id @default(cuid())
  merchantOid  String   @unique
  amount       Int
  currency     String   @default("TL")
  status       String
  raw          Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refunds      Refund[]

  // âš  BurayÄ± optional bÄ±rakÄ±yoruz
  order        Order?   @relation(fields: [orderId], references: [id])
  orderId      String   @unique
}

model Order {
  id            String      @id @default(uuid())
  orderNo       String      @unique
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  phone         String?
  status        OrderStatus @default(PENDING)
  addressTitle         String?
  addressFullName      String?
  addressPhone         String?
  addressCity          String?
  addressDistrict      String?
  addressNeighbourhood String?
  addressDetail        String?
  addressZip           String?
  items         OrderItem[]
  subtotal      Decimal     @db.Decimal(10, 2)
  discountTotal Decimal     @default(0) @db.Decimal(10, 2)
  shippingTotal Decimal     @default(0) @db.Decimal(10, 2)
  taxTotal      Decimal     @default(0) @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)
  currency      String      @default("TRY")
  payment       Payment?
  shipment      Shipment?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  returnRequests ReturnRequest[]
}


enum PaymentStatus {
  PENDING
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELED
}

enum ReturnReason {
  PRODUCT_DEFECT
  WRONG_ITEM_SENT
  SHIPPING_DELAY
  DONTLIKE_ITEM
  OTHER
}

model ReturnRequest {
  id          String        @id @default(uuid())
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  userId      String?
  user        User?         @relation(fields: [userId], references: [id])
  status      ReturnStatus  @default(PENDING)
  comment     String?
  items       ReturnItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  refunds     Refund[]
}

model ReturnItem {
  id              String        @id @default(uuid())
  returnRequestId String
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id])
  orderItemId     String
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id])
  qty             Int           @default(1)
  status          ReturnStatus  @default(PENDING)
  reason          ReturnReason
}

model Refund {
  id              String         @id @default(uuid())
  paymentId       String
  payment         Payment        @relation(fields: [paymentId], references: [id])
  returnRequestId String?
  returnRequest   ReturnRequest? @relation(fields: [returnRequestId], references: [id])
  amount          Decimal        @db.Decimal(10, 2)
  status          RefundStatus   @default(PENDING)
  txId            String?
  reason          RefundReason?
  raw             Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum RefundReason {
  CUSTOMER_REQUEST
  PRODUCT_DEFECT
  WRONG_ITEM_SENT
  SHIPPING_DELAY
  OTHER
}

enum RefundStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  RECEIVED
  REFUNDED
}

model Shipment {
  id         String         @id @default(uuid())
  orderId    String         @unique
  order      Order          @relation(fields: [orderId], references: [id])
  provider   ShippingProvider
  trackingNo String?
  status     ShipmentStatus @default(PENDING)
  raw        Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELED
}

enum ShippingProvider {
  YURTICI
  MNG
  ARAS
  UPS
  PTT
  SURAT
  TRENDYOL_EXPRESS
  HEPSIJET
}
model Slider {
  id          String      @id @default(cuid())
  title       String?     // BaÅŸlÄ±k (opsiyonel)
  subtitle    String?     // Alt baÅŸlÄ±k (opsiyonel)
  imageUrl    String      // Slider gÃ¶rseli (Supabase/Cloud storage URL)
  link        String?     // Slider tÄ±klanÄ±nca gidilecek URL
  type        SliderType  @default(PROMOTION) // Tip: PROMOTION | PRODUCT | CATEGORY
  products  Product[] @relation("SliderProducts")
  order       Int         @default(0)  // SÄ±ralama
  isActive    Boolean     @default(true) // YayÄ±nda mÄ±?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum SliderType {
  PROMOTION
  PRODUCT
  CATEGORY
}

model Review {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  rating     Int
  content    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  @@unique([productId, userId])
}

model Wishlist {
  id       String    @id @default(uuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  products Product[] @relation("WishlistProducts")
}
model GenericData {
  id           String   @id @default(cuid())
  brandName    String?
  logoUrl      String?
  phone        String?
  email        String?
  address      String?
  instagramUrl String?
  facebookUrl  String?
  youtubeUrl   String?
  tiktokUrl    String?
  description  String?   
  createdAt    DateTime  @default(now())
}
