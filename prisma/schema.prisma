generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String?
  fullName     String
  phone        String?    @db.VarChar(32)
  role         Role       @default(CUSTOMER)
  addresses    Address[]
  orders       Order[]
  wishlists    Wishlist[]
  carts        Cart[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Review       Review[]
    returnRequests ReturnRequest[] 

}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Address {
 id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String   // "Ev", "Ä°ÅŸ", "Aile" gibi
  fullName  String
  phone     String
  city      String
  district  String
  neighbourhood String
  address1  String   // sokak/cadde/bina bilgisi
  zip       String?
  isDefault Boolean  @default(false)
  Order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  logoUrl  String?
  products Product[]
}

model Category {
  id       String     @id @default(uuid())
  name     String
  slug     String     @unique
  parentId String?
  imageUrl String?
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]
}
model Product {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique
  description String?
  brandId     String?
  brand       Brand?           @relation(fields: [brandId], references: [id])
  categoryId  String
  category    Category         @relation(fields: [categoryId], references: [id])
  images      ProductImage[]   
  variants    ProductVariant[] 
  price       Decimal?         @db.Decimal(10, 2)
  currency    String           @default("TRY")
  status      ProductStatus    @default(DRAFT)
  inStock     Boolean          @default(true)
  ratingAvg   Float            @default(0)
  ratingCount Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  Review      Review[]
  wishlists   Wishlist[]       @relation("WishlistProducts")
  properties  ProductProperty[]
  modelInfoId String?          // ÃœrÃ¼nÃ¼n mankeni
  modelInfo   ModelInfo?       @relation(fields: [modelInfoId], references: [id])
  modelSize   String?     

}

model ModelInfo {
  id      String   @id @default(cuid())
  name    String
  height  Int?
  weight  Int?
  chest   Int?
  waist   Int?
  hip     Int?
  products Product[]
}

model ProductVariant {
  id         String                 @id @default(uuid())
  productId  String
  product    Product                @relation(fields: [productId], references: [id])
  sku        String?                @unique
  price      Decimal?               @db.Decimal(10, 2) // Varyasyon Ã¶zel fiyatÄ±
  stockQty   Int                    @default(0)
  barcode    String?
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  images     VariantImage[]         // Her varyasyona Ã¶zel gÃ¶rsel
  attributes ProductVariantAttribute[]
  CartItem   CartItem[]
  OrderItem  OrderItem[]
}

model VariantImage {
  id         String          @id @default(uuid())
  variantId  String
  variant    ProductVariant  @relation(fields: [variantId], references: [id])
  url        String
  alt        String?
  order      Int             @default(0)
}

// ðŸ”¹ Yeni Attribute sistemi
model AttributeType {
  id      String           @id @default(uuid())
  name    String           // Ã–rn: Renk, Beden
  values  AttributeValue[]
}

model AttributeValue {
  id              String                  @id @default(uuid())
  attributeTypeId String
  value           String                  // Ã–rn: "KÄ±rmÄ±zÄ±", "M"
  type            AttributeType           @relation(fields: [attributeTypeId], references: [id])
  variantAttributes ProductVariantAttribute[]
}

model ProductVariantAttribute {
  id               String           @id @default(uuid())
  variantId        String
  attributeValueId String
  variant ProductVariant @relation(fields: [variantId], references: [id])
  value   AttributeValue @relation(fields: [attributeValueId], references: [id])
}


model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  alt       String?
  order     Int      @default(0)
}


enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}


model Cart {
  id        String     @id @default(uuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String          @id @default(uuid())
  cartId    String
  cart      Cart            @relation(fields: [cartId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  qty       Int             @default(1)
  unitPrice Decimal         @db.Decimal(10, 2)
}

model Coupon {
  id        String     @id @default(uuid())
  code      String     @unique
  type      CouponType
  value     Decimal    @db.Decimal(10, 2)
  startsAt  DateTime?
  endsAt    DateTime?
  maxUses   Int?
  usedCount Int        @default(0)
  isActive  Boolean    @default(true)
}

enum CouponType {
  PERCENT
  FIXED
}

model Order {
  id            String      @id @default(uuid())
  orderNo       String      @unique
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  email         String
  phone         String?
  status        OrderStatus @default(PENDING)
  addressId     String?
  address       Address?    @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  subtotal      Decimal     @db.Decimal(10, 2)
  discountTotal Decimal     @default(0) @db.Decimal(10, 2)
  shippingTotal Decimal     @default(0) @db.Decimal(10, 2)
  taxTotal      Decimal     @default(0) @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)
  currency      String      @default("TRY")
  payment       Payment?
  shipment      Shipment?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  returnRequests ReturnRequest[]   // ðŸ‘ˆ eklendi

}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  name      String
  qty       Int
  unitPrice Decimal         @db.Decimal(10, 2)
  returnItems ReturnItem[]  // ðŸ‘ˆ eklendi
}

model PropertyType {
  id       String           @id @default(uuid())
  name     String           @unique
  values   PropertyValue[]  // Cascade ile silinecek
  products ProductProperty[]
}

model PropertyValue {
  id             String       @id @default(uuid())
  value          String
  propertyTypeId String
  propertyType   PropertyType @relation(fields: [propertyTypeId], references: [id], onDelete: Cascade)
  products       ProductProperty[]
}

model ProductProperty {
  id              String        @id @default(uuid())
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  propertyTypeId  String
  propertyType    PropertyType  @relation(fields: [propertyTypeId], references: [id])
  propertyValueId String
  propertyValue   PropertyValue @relation(fields: [propertyValueId], references: [id])
  @@unique([productId, propertyValueId]) // her Ã¼rÃ¼n aynÄ± deÄŸeri sadece 1 kez alabilir
}

model Payment {
  id       String        @id @default(uuid())
  orderId  String        @unique
  order    Order         @relation(fields: [orderId], references: [id])
  provider String
  status   PaymentStatus @default(PENDING)
  txId     String?
  raw      Json?
 refunds  Refund[]      // ðŸ‘ˆ eklendi
}

enum PaymentStatus {
  PENDING
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELED
}
model ReturnRequest {
  id          String        @id @default(uuid())
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  userId      String?
  user        User?         @relation(fields: [userId], references: [id])
  status      ReturnStatus  @default(PENDING)
  reason      String?       // Genel iade sebebi
  comment     String?       // MÃ¼ÅŸteri ek aÃ§Ä±klamasÄ±
  items       ReturnItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  refunds     Refund[]      // ðŸ‘ˆ eklendi

}

model ReturnItem {
  id              String        @id @default(uuid())
  returnRequestId String
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id])
  orderItemId     String
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id])
  qty             Int           @default(1)  // KaÃ§ adet iade ediliyor
  status          ReturnStatus  @default(PENDING)
  reason          String?       // ÃœrÃ¼n bazlÄ± sebep
}
model Refund {
  id             String        @id @default(uuid())
  paymentId      String
  payment        Payment       @relation(fields: [paymentId], references: [id])
  returnRequestId String?
  returnRequest  ReturnRequest? @relation(fields: [returnRequestId], references: [id])
  amount         Decimal       @db.Decimal(10, 2)  // Ä°ade edilen tutar
  status         RefundStatus  @default(PENDING)
  txId           String?       // Ã–deme saÄŸlayÄ±cÄ±dan dÃ¶nen iÅŸlem numarasÄ±
  reason         String?
  raw            Json?         // Ã–deme saÄŸlayÄ±cÄ±dan gelen ham veri
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum RefundStatus {
  PENDING     // Ä°ade baÅŸlatÄ±ldÄ± ama henÃ¼z sonuÃ§lanmadÄ±
  SUCCEEDED   // BaÅŸarÄ±lÄ±
  FAILED      // BaÅŸarÄ±sÄ±z
  CANCELED    // Ä°ade iptal edildi
}

enum ReturnStatus {
  PENDING      // Talep alÄ±ndÄ±
  APPROVED     // OnaylandÄ±
  REJECTED     // Reddedildi
  RECEIVED     // ÃœrÃ¼n teslim alÄ±ndÄ±
  REFUNDED     // Ãœcret iadesi yapÄ±ldÄ±
}

model Shipment {
  id         String         @id @default(uuid())
  orderId    String         @unique
  order      Order          @relation(fields: [orderId], references: [id])
  provider   ShippingProvider
  trackingNo String?
  status     ShipmentStatus @default(PENDING)
  raw        Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELED
}

enum ShippingProvider {
  YURTICI
  MNG
  ARAS
  UPS
  PTT
  SURAT
  TRENDYOL_EXPRESS
  HEPSIJET
}

model Review {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  rating     Int
  title      String?
  content    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
}
model Wishlist {
  id       String    @id @default(uuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  products Product[] @relation("WishlistProducts") // ðŸ‘ˆ eÅŸleÅŸen relation adÄ±
}